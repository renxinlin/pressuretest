# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
registryItems:
  applications:
    - {cassandra-java-driver-3.x-scenario: 2}
  instances:
    - {cassandra-java-driver-3.x-scenario: 1}
  operationNames:
    - cassandra-java-driver-3.x-scenario: [/cassandra-java-driver-3.x-scenario/case/cassandra]
  heartbeat: []
segmentItems:
  - applicationCode: cassandra-java-driver-3.x-scenario
    segmentSize: ge 1
    segments:
    - segmentId: not null
      spans:
      - operationName: Cassandra/getUninterruptibly
        operationId: 0
        parentSpanId: 1
        spanId: 2
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Local
        peer: ''
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
      - operationName: Cassandra/execute
        operationId: 0
        parentSpanId: 0
        spanId: 1
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Exit
        peer: cassandra-server:9042
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
        - {key: db.instance, value: ''}
        - {key: db.statement, value: 'CREATE KEYSPACE IF NOT EXISTS demo WITH replication = {''class'': ''SimpleStrategy'', ''replication_factor'': 1}'}
      - operationName: Cassandra/getUninterruptibly
        operationId: 0
        parentSpanId: 3
        spanId: 4
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Local
        peer: ''
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
      - operationName: Cassandra/execute
        operationId: 0
        parentSpanId: 0
        spanId: 3
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Exit
        peer: cassandra-server:9042
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
        - {key: db.instance, value: ''}
        - {key: db.statement, value: 'CREATE TABLE IF NOT EXISTS demo.test(id TEXT PRIMARY KEY, value TEXT)'}
      - operationName: Cassandra/getUninterruptibly
        operationId: 0
        parentSpanId: 5
        spanId: 6
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Local
        peer: ''
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
      - operationName: Cassandra/execute
        operationId: 0
        parentSpanId: 0
        spanId: 5
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Exit
        peer: cassandra-server:9042
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
        - {key: db.instance, value: demo}
        - {key: db.statement, value: 'INSERT INTO demo.test(id, value) VALUES(?,?)'}
      - operationName: Cassandra/getUninterruptibly
        operationId: 0
        parentSpanId: 7
        spanId: 8
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Local
        peer: ''
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
      - operationName: Cassandra/execute
        operationId: 0
        parentSpanId: 0
        spanId: 7
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Exit
        peer: cassandra-server:9042
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
        - {key: db.instance, value: demo}
        - {key: db.statement, value: 'SELECT * FROM demo.test WHERE id = ?'}
      - operationName: Cassandra/getUninterruptibly
        operationId: 0
        parentSpanId: 9
        spanId: 10
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Local
        peer: ''
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
      - operationName: Cassandra/execute
        operationId: 0
        parentSpanId: 0
        spanId: 9
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Exit
        peer: cassandra-server:9042
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
        - {key: db.instance, value: demo}
        - {key: db.statement, value: 'DELETE FROM demo.test WHERE id = ?'}
      - operationName: Cassandra/getUninterruptibly
        operationId: 0
        parentSpanId: 11
        spanId: 12
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Local
        peer: ''
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
      - operationName: Cassandra/execute
        operationId: 0
        parentSpanId: 0
        spanId: 11
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Exit
        peer: cassandra-server:9042
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
        - {key: db.instance, value: ''}
        - {key: db.statement, value: DROP TABLE IF EXISTS demo.test}
      - operationName: Cassandra/getUninterruptibly
        operationId: 0
        parentSpanId: 13
        spanId: 14
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Local
        peer: ''
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
      - operationName: Cassandra/execute
        operationId: 0
        parentSpanId: 0
        spanId: 13
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Exit
        peer: cassandra-server:9042
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
        - {key: db.instance, value: ''}
        - {key: db.statement, value: DROP KEYSPACE IF EXISTS demo}
      - operationName: Cassandra/executeAsync
        operationId: 0
        parentSpanId: 0
        spanId: 15
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Exit
        peer: cassandra-server:9042
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
        - {key: db.instance, value: ''}
        - {key: db.statement, value: 'CREATE KEYSPACE IF NOT EXISTS demo WITH replication
            = {''class'': ''SimpleStrategy'', ''replication_factor'': 1}'}
      - operationName: Cassandra/getUninterruptibly
        operationId: 0
        parentSpanId: 0
        spanId: 16
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Local
        peer: ''
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
      - operationName: Cassandra/executeAsync
        operationId: 0
        parentSpanId: 0
        spanId: 17
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Exit
        peer: cassandra-server:9042
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
        - {key: db.instance, value: ''}
        - {key: db.statement, value: 'CREATE TABLE IF NOT EXISTS demo.test(id TEXT PRIMARY
            KEY, value TEXT)'}
      - operationName: Cassandra/getUninterruptibly
        operationId: 0
        parentSpanId: 0
        spanId: 18
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Local
        peer: ''
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
      - operationName: Cassandra/executeAsync
        operationId: 0
        parentSpanId: 0
        spanId: 19
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Exit
        peer: cassandra-server:9042
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
        - {key: db.instance, value: demo}
        - {key: db.statement, value: 'INSERT INTO demo.test(id, value) VALUES(?,?)'}
      - operationName: Cassandra/getUninterruptibly
        operationId: 0
        parentSpanId: 0
        spanId: 20
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Local
        peer: ''
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
      - operationName: Cassandra/executeAsync
        operationId: 0
        parentSpanId: 0
        spanId: 21
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Exit
        peer: cassandra-server:9042
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
        - {key: db.instance, value: demo}
        - {key: db.statement, value: 'SELECT * FROM demo.test WHERE id = ?'}
      - operationName: Cassandra/getUninterruptibly
        operationId: 0
        parentSpanId: 0
        spanId: 22
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Local
        peer: ''
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
      - operationName: Cassandra/executeAsync
        operationId: 0
        parentSpanId: 0
        spanId: 23
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Exit
        peer: cassandra-server:9042
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
        - {key: db.instance, value: demo}
        - {key: db.statement, value: 'DELETE FROM demo.test WHERE id = ?'}
      - operationName: Cassandra/getUninterruptibly
        operationId: 0
        parentSpanId: 0
        spanId: 24
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Local
        peer: ''
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
      - operationName: Cassandra/executeAsync
        operationId: 0
        parentSpanId: 0
        spanId: 25
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Exit
        peer: cassandra-server:9042
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
        - {key: db.instance, value: ''}
        - {key: db.statement, value: DROP TABLE IF EXISTS demo.test}
      - operationName: Cassandra/getUninterruptibly
        operationId: 0
        parentSpanId: 0
        spanId: 26
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Local
        peer: ''
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
      - operationName: Cassandra/executeAsync
        operationId: 0
        parentSpanId: 0
        spanId: 27
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Exit
        peer: cassandra-server:9042
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
        - {key: db.instance, value: ''}
        - {key: db.statement, value: DROP KEYSPACE IF EXISTS demo}
      - operationName: Cassandra/getUninterruptibly
        operationId: 0
        parentSpanId: 0
        spanId: 28
        spanLayer: Database
        startTime: nq 0
        endTime: nq 0
        componentId: 69
        componentName: ''
        isError: false
        spanType: Local
        peer: ''
        peerId: 0
        tags:
        - {key: db.type, value: cassandra}
      - operationName: /cassandra-java-driver-3.x-scenario/case/cassandra
        operationId: 0
        parentSpanId: -1
        spanId: 0
        spanLayer: Http
        startTime: nq 0
        endTime: nq 0
        componentId: 1
        componentName: ''
        isError: false
        spanType: Entry
        peer: ''
        peerId: 0
        tags:
        - {key: url, value: 'http://localhost:8080/cassandra-java-driver-3.x-scenario/case/cassandra'}
        - {key: http.method, value: GET}
